name: Update Server

on:
  # Указывает на то, что этот action запускается только после push или pull request в main ветку
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Позволяет запускать процесс вручную через
  workflow_dispatch:

# Сам процесс сборки
jobs:
  release:
    runs-on: ubuntu-latest
    # Сборка состоит из нескольких шагов
    steps:
      # Авторизация в Docker Hub, чтобы в дальнейшем загрузить туда ваш образ
      # Для этого в настройках необходимо указать параметры подключения(имя пользователя и токен доступа)
      # Параметры secrets.DOCKER_HUB_USERNAME и secrets.DOCKER_HUB_ACCESS_TOKEN
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # Сборка и загрузка вашего образа в Docker Hub
      # Все делается автоматически
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest
      # Обновление на сервере через ssh
      # Для этого в настройках необходимо указать параметры подключения(хост, порт, пользователя и приватный ключ для подключения)
      # Параметры secrets.SSH_HOST, secrets.SSH_PORT, secrets.SSH_USERNAME, secrets.SSH_PRIVATE_KEY
      - name: Update project on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # Основной скрипт, который и обновляет ваш проект на сервере
          script: |
            set -e  # Прекращает выполнение скрипта при первой ошибке
            
            # Переменные для более удобной работы
            REPO_NAME=${{ github.event.repository.name }}
            IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest
            
            # Переходим в папку проекта(папка называется также, как и называется проект)
            # Если папки нет, то она будет автоматически создана с пустым .env внутри
            echo "Navigating to project directory..."
            if [ ! -d $REPO_NAME ]; then
              mkdir -p $REPO_NAME
              cd $REPO_NAME
              echo 'SECRET=' > .env
            else
              cd $REPO_NAME
            fi
            
            # Останавливает и удаляет существующий контейнер, если он есть
            if [ $(docker ps -q -f name=$REPO_NAME) ]; then
              echo "Stopping and removing existing container..."
              docker stop $REPO_NAME
              docker rm $REPO_NAME
            else
              echo "No existing container found."
            fi
            
            # Удаляет существующий образ, если он есть
            if [ $(docker images -q $IMAGE_NAME) ]; then
              echo "Removing old image..."
              docker rmi --force $IMAGE_NAME || { echo "Failed to remove old image"; exit 1; }
            else
              echo "No old image found."
            fi
            
            # Запуск проекта
            echo "Starting new container..."
            docker run -d -p 8000:8000 --env-file .env --name $REPO_NAME --restart unless-stopped $IMAGE_NAME
